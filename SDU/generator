#!/usr/bin/env python

from rdflib import Graph, Namespace, URIRef

################################################################################
############################################################## front matter ####
################################################################################

BS = Namespace('http://www.semanticweb.org/jbkoh/ontologies/2016/4/BuildingSchema#')
RDF = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')

g = Graph()
g.bind('rdf', RDF)
g.bind('bs', BS)

################################################################################
################################################################### helpers ####
################################################################################

def m2m_add (o1s, verb, o2s):
    for o1 in o1s:
        for o2 in o2s:
            g.add( (o1, verb, o2) )

################################################################################
################################################################ constructs ####
################################################################################

def flow_meter (prefix):
    # actors
    flow_sensor = URIRef(prefix+'/flow_sensor')
    supply_temperature_sensor = URIRef(prefix+'/supply_temperature_sensor')
    return_temperature_sensor = URIRef(prefix+'/return_temperature_sensor')
    power_calculator = URIRef(prefix+'/power_calculator')
    
    # types
    g.add( (flow_sensor, RDF.type, BS['Hot_Water_Flow']) )
    g.add( (flow_sensor, RDF.type, BS['Sensor']) )
    g.add( (supply_temperature_sensor, RDF.type, BS['Hot_Water_Supply_Temperature']) )
    g.add( (supply_temperature_sensor, RDF.type, BS['Sensor']) )
    g.add( (return_temperature_sensor, RDF.type, BS['Hot_Water_Return_Temperature']) )
    g.add( (return_temperature_sensor, RDF.type, BS['Sensor']) )
    g.add( (power_calculator, RDF.type, BS['Power']) )
    g.add( (power_calculator, RDF.type, BS['Sensor']) )
    
    # relationships
    g.add( (flow_sensor, BS.feeds, supply_temperature_sensor) )
    g.add( (flow_sensor, BS.feeds, power_calculator) )
    g.add( (supply_temperature_sensor, BS.feeds, power_calculator) )
    g.add( (return_temperature_sensor, BS.feeds, power_calculator) )
    
    # ports
    ports = {
      'supply': [flow_sensor],
      'metered supply': [supply_temperature_sensor],
      'return': [return_temperature_sensor],
      'metered return': [return_temperature_sensor],
    }
    return ports

def heat_exchanger (prefix):
    # actors
    primary_surface = URIRef(prefix+'/primary')
    secondary_surface = URIRef(prefix+'/secondary')
    exchanger = URIRef(prefix+'/exchanger')
    
    # types
    g.add( (primary_surface, RDF.type, BS['Coil']) )
    g.add( (secondary_surface, RDF.type, BS['Coil']) )
    g.add( (exchanger, RDF.type, BS['System']) )
    
    # relationships
    g.add( (primary_surface, BS.feeds, exchanger) )
    g.add( (secondary_surface, BS.feeds, exchanger) )
    g.add( (exchanger, BS.feeds, primary_surface) )
    g.add( (exchanger, BS.feeds, secondary_surface) )
    
    # ports
    ports = {
        'primary input': [primary_surface],
        'primary output': [primary_surface],
        'control': [exchanger],
        'secondary input': [secondary_surface],
        'secondary output': [secondary_surface],
    }
    return ports

def heat_transfer_group (prefix):
    # actors
    fm = flow_meter(prefix+'/flowmeter')
    he = heat_exchanger(prefix+'/heatexchanger')
    pump = URIRef(prefix+'/pump')
    supply_temperature = URIRef(prefix+'/supply_temperature')
    return_temperature = URIRef(prefix+'/return_temperature')
    
    # types
    g.add( (supply_temperature, RDF.type, BS['Hot_Water_Supply_Temperature']) )
    g.add( (supply_temperature, RDF.type, BS['Sensor']) )
    g.add( (return_temperature, RDF.type, BS['Hot_Water_Return_Temperature']) )
    g.add( (return_temperature, RDF.type, BS['Sensor']) )
    g.add( (pump, RDF.type, BS['Hot_Water_Pump']) )
    
    # relationships
    m2m_add(fm['metered supply'], BS.feeds, he['primary input'])
    m2m_add(he['primary output'], BS.feeds, fm['metered return'])
    m2m_add(he['secondary output'], BS.feeds, [pump])
    g.add( (pump, BS.feeds, supply_temperature) )
    m2m_add([return_temperature], BS.feeds, he['secondary input'])
    
    # ports
    ports = {
        'primary input': fm['supply'],
        'primary output': fm['return'],
        'secondary input': [return_temperature],
        'secondary output': [supply_temperature],
    }
    return ports

def central_heating_group (prefix):
    # actors
    fm = flow_meter(prefix+'/flowmeter')
    htg_radiator = heat_transfer_group(prefix+'/radiator')
    htg_floor = heat_transfer_group(prefix+'/floor')
    
    # types
    
    # relationships
    m2m_add(fm['metered supply'], BS.feeds, htg_radiator['primary input'])
    m2m_add(fm['metered supply'], BS.feeds, htg_floor['primary input'])
    m2m_add(htg_radiator['primary output'], BS.feeds, fm['metered return'])
    m2m_add(htg_floor['primary output'], BS.feeds, fm['metered return'])
    
    # ports
    ports = {
        'central input':  fm['supply'],
        'central output': fm['return'],
        'metered central input':  fm['metered return'],
        'metered central output': fm['metered supply'],
        'radiator input':  htg_radiator['secondary input'],
        'radiator output': htg_radiator['secondary output'],
        'floor input':  htg_floor['secondary input'],
        'floor output': htg_floor['secondary output'],
    }
    return ports

def filter_element (prefix):
    # actors
    filter_obj = URIRef(prefix+'/filter')
    pressure_before = URIRef(prefix+'/pressure_before')
    pressure_after  = URIRef(prefix+'/pressure_after')
    dpt = URIRef(prefix+'/dpt')
    
    # types
    g.add( (filter_obj, RDF.type, BS['Filter']) )
    g.add( (pressure_before, RDF.type, BS['Pressure']) )
    g.add( (pressure_before, RDF.type, BS['Sensor']) )
    g.add( (pressure_after, RDF.type, BS['Pressure']) )
    g.add( (pressure_after, RDF.type, BS['Sensor']) )
    g.add( (dpt, RDF.type, BS['Differential']) )
    g.add( (dpt, RDF.type, BS['Pressure']) )
    
    # relationships
    g.add( (pressure_before, BS.feeds, filter_obj) )
    g.add( (filter_obj, BS.feeds, pressure_after) )
    g.add( (pressure_before, BS.feeds, dpt) )
    g.add( (pressure_after, BS.feeds, dpt) )
    
    # ports
    ports = {
        'input':  [pressure_before],
        'output': [pressure_after],
    }
    return ports

def heat_exchanger_group (prefix):
    # actors
    fe_outside  = filter_element(prefix+'/fe_outside')
    fe_recovery = filter_element(prefix+'/fe_recovery')
    he_recovery = heat_exchanger(prefix+'/he_recovery')
    he_heat     = heat_exchanger(prefix+'/he_heat')
    fm          = flow_meter(prefix+'/flowmeter')
    temperature_outside = URIRef(prefix+'/temperature_outside')
    temperature_he_rec_prim_in  = URIRef(prefix+'/temperature_he_recovery_prim_in')
    temperature_he_rec_prim_out = URIRef(prefix+'/temperature_he_recovery_prim_out')
    temperature_he_rec_sec_in  = URIRef(prefix+'/temperature_he_recovery_sec_in')
    temperature_he_rec_sec_out = URIRef(prefix+'/temperature_he_recovery_sec_out')
    temperature_he_heat_prim_in  = URIRef(prefix+'/temperature_he_heat_prim_in')
    temperature_he_heat_prim_out = URIRef(prefix+'/temperature_he_heat_prim_out')
    temperature_he_heat_sec_out = URIRef(prefix+'/temperature_he_heat_sec_out')
    valve = URIRef(prefix+'/valve')
    pump = URIRef(prefix+'/pump')
    rectifier = URIRef(prefix+'/rectifier')
    pressure_ret_south = URIRef(prefix+'/pressure_return_south')
    pressure_ret_north = URIRef(prefix+'/pressure_return_north')
    pressure_sup_south = URIRef(prefix+'/pressure_supply_south')
    pressure_sup_north = URIRef(prefix+'/pressure_supply_north')
    damper = URIRef(prefix+'/damper')
    damper_setpoint = URIRef(prefix+'/damper_setpoint')
    fan_exhaust = URIRef(prefix+'/fan_exhaust')
    fan_exhaust_setpoint = URIRef(prefix+'/fan_exhaust_setpoint')
    fan_inter = URIRef(prefix+'/fan_inter')
    fan_inter_setpoint = URIRef(prefix+'/fan_inter_setpoint')
    
    # types
    g.add( (temperature_outside, RDF.type, BS['Outside_Air_Temperature']) )
    g.add( (temperature_outside, RDF.type, BS['Sensor']) )
    g.add( (temperature_he_rec_prim_in, RDF.type, BS['Air']) )
    g.add( (temperature_he_rec_prim_in, RDF.type, BS['Temperature']) )
    g.add( (temperature_he_rec_prim_in, RDF.type, BS['Sensor']) )
    g.add( (temperature_he_rec_prim_out, RDF.type, BS['Air']) )
    g.add( (temperature_he_rec_prim_out, RDF.type, BS['Temperature']) )
    g.add( (temperature_he_rec_prim_out, RDF.type, BS['Sensor']) )
    g.add( (temperature_he_rec_sec_in, RDF.type, BS['Air']) )
    g.add( (temperature_he_rec_sec_in, RDF.type, BS['Temperature']) )
    g.add( (temperature_he_rec_sec_in, RDF.type, BS['Sensor']) )
    g.add( (temperature_he_rec_sec_out, RDF.type, BS['Air']) )
    g.add( (temperature_he_rec_sec_out, RDF.type, BS['Temperature']) )
    g.add( (temperature_he_rec_sec_out, RDF.type, BS['Sensor']) )
    g.add( (temperature_he_heat_prim_in, RDF.type, BS['Hot_Water_Supply_Temperature']) )
    g.add( (temperature_he_heat_prim_in, RDF.type, BS['Sensor']) )
    g.add( (temperature_he_heat_sec_out, RDF.type, BS['Hot_Water_Return_Temperature']) )
    g.add( (temperature_he_heat_sec_out, RDF.type, BS['Sensor']) )
    g.add( (valve, RDF.type, BS['Valve']) )
    g.add( (pump, RDF.type, BS['Hot_Water_Pump']) )
    g.add( (rectifier, RDF.type, BS['System']) )
    g.add( (pressure_ret_south, RDF.type, BS['Return_Air_Temperature']) )
    g.add( (pressure_ret_south, RDF.type, BS['Sensor']) )
    g.add( (pressure_ret_north, RDF.type, BS['Return_Air_Temperature']) )
    g.add( (pressure_ret_north, RDF.type, BS['Sensor']) )
    g.add( (pressure_sup_south, RDF.type, BS['Supply']) )
    g.add( (pressure_sup_south, RDF.type, BS['Air']) )
    g.add( (pressure_sup_south, RDF.type, BS['Pressure']) )
    g.add( (pressure_sup_south, RDF.type, BS['Sensor']) )
    g.add( (pressure_sup_north, RDF.type, BS['Supply']) )
    g.add( (pressure_sup_north, RDF.type, BS['Air']) )
    g.add( (pressure_sup_north, RDF.type, BS['Pressure']) )
    g.add( (pressure_sup_north, RDF.type, BS['Sensor']) )
    g.add( (damper, RDF.type, BS['Damper']) )
    g.add( (damper_setpoint, RDF.type, BS['Setpoint']) )
    g.add( (fan_exhaust, RDF.type, BS['Exhaust']) )
    g.add( (fan_exhaust, RDF.type, BS['Air']) )
    g.add( (fan_exhaust, RDF.type, BS['Fan']) )
    g.add( (fan_exhaust_setpoint, RDF.type, BS['Setpoint']) )
    g.add( (fan_inter, RDF.type, BS['Air']) )
    g.add( (fan_inter, RDF.type, BS['Fan']) )
    g.add( (fan_inter_setpoint, RDF.type, BS['Setpoint']) )
    
    # relationships
    g.add( (fan_exhaust_setpoint, BS.feeds, fan_exhaust) )
    g.add( (fan_inter_setpoint, BS.feeds, fan_inter) )
    g.add( (damper_setpoint, BS.feeds, damper) )
    g.add( (temperature_he_rec_prim_out, BS.feeds, fan_exhaust) )
    m2m_add(he_recovery['primary output'], BS.feeds, [temperature_he_rec_prim_out])
    m2m_add([temperature_he_rec_prim_in], BS.feeds, he_recovery['primary input'])
    m2m_add([temperature_he_rec_sec_in], BS.feeds, he_recovery['secondary input'])
    m2m_add(he_recovery['secondary output'], BS.feeds, [temperature_he_rec_sec_out])
    g.add( (temperature_he_rec_sec_out, BS.feeds, fan_inter) )
    m2m_add([fan_inter], BS.feeds, he_heat['secondary input'])
    m2m_add(he_heat['secondary output'], BS.feeds, [temperature_he_heat_sec_out])
    m2m_add([pump], BS.feeds, he_heat['primary input'])
    m2m_add(he_heat['primary output'], BS.feeds, [temperature_he_heat_prim_out])
    g.add( (temperature_he_heat_prim_in, BS.feeds, pump) )
    g.add( (temperature_he_heat_prim_out, BS.feeds, valve) )
    g.add( (temperature_he_heat_prim_out, BS.feeds, rectifier) )
    g.add( (rectifier, BS.feeds, temperature_he_heat_prim_in) )
    g.add( (pressure_ret_south, BS.feeds, damper) )
    g.add( (pressure_ret_north, BS.feeds, damper) )
    g.add( (temperature_he_heat_sec_out, BS.feeds, pressure_sup_south) )
    g.add( (temperature_he_heat_sec_out, BS.feeds, pressure_sup_north) )
    m2m_add([temperature_outside], BS.feeds, fe_outside['input'])
    m2m_add(fe_outside['output'], BS.feeds, [temperature_he_rec_sec_in])
    m2m_add([damper], BS.feeds, fe_recovery['input'])
    m2m_add(fe_recovery['output'], BS.feeds, [temperature_he_rec_prim_in])
    m2m_add([valve], BS.feeds, fm['metered return'])
    m2m_add(fm['metered supply'], BS.feeds, [temperature_he_heat_prim_in])
    
    # ports
    ports = {
        'exhaust air': [fan_exhaust],
        'outside air': [temperature_outside],
        'heated water input': fm['supply'],
        'heated water output': fm['return'],
        'output north': [pressure_sup_north],
        'output south': [pressure_sup_south],
        'input north': [pressure_ret_north],
        'input south': [pressure_ret_south],
    }
    return ports

################################################################################
###################################################################### main ####
################################################################################

prefix = 'building:gtc'

# building
building = URIRef(prefix)
g.add( (building, RDF.type, BS['Building']) )

#fm = flow_meter(prefix+'/flowmeter')
#he = heat_exchanger(prefix+'/heatexchanger')
#htg = heat_transfer_group (prefix+'/htg')
chg = central_heating_group(prefix+'/chg')
#fe = filter_element(prefix+'/fe')
heg = heat_exchanger_group(prefix+'/heg')

################################################################################
############################################################### back matter ####
################################################################################

g.serialize('sdu_gtc.ttl', 'turtle')

