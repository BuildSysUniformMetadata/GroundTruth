a1a=apply(a1,1,paste,collapse="")
a2a=apply(a2,1,paste,collapse="")
a1
head(a1)
setdiff(a1a,a2a)
setdiff(a2a,a1a)
head(a1)
a1[,c(3,5,6)]
head(a1[,c(3,5,6)])
a1a=apply(a1[,c(3,5,6)],1,paste,collapse="")
a2a=apply(a2[,c(3,5,6)],1,paste,collapse="")
setdiff(a2a,a1a)
head(a1)
d12=setdiff(a2a,a1a)
d12
a1=read.csv("mailArch1.csv",header=F)
a1a=apply(a1[,c(3,5,6)],1,paste,collapse="")
a2a=apply(a2[,c(3,5,6)],1,paste,collapse="")
a2=read.csv("mailArch2.csv",header=F)
d12=setdiff(a2a,a1a)
d12
a1=read.csv("mailArch1.csv",header=F)
a1a=apply(a1[,c(3,5,6)],1,paste,collapse="")
a2=read.csv("mailArch2.csv",header=F)
a2a=apply(a2[,c(3,5,6)],1,paste,collapse="")
d12=setdiff(a2a,a1a)
d12
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8")
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8")
a1a=apply(a1[,c(3,5,6)],1,paste,collapse="")
a2=read.csv("mailArch2.csv",header=F,encoding="UTF-8")
a2a=apply(a2[,c(3,5,6)],1,paste,collapse="")
d12=setdiff(a2a,a1a)
d12
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8")
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8")
a1a=apply(a1[,c(3,5,6)],1,paste,collapse="")
a2=read.csv("mailArch2.csv",header=F,encoding="UTF-8")
a2a=apply(a2[,c(3,5,6)],1,paste,collapse="")
d12=setdiff(a2a,a1a)
d12
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8")
a2=read.csv("mailArch2.csv",header=F,encoding="UTF-8")
a2
tail(a2)
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8",sep="\t")
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8",quote = "\"")
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8",quote = "")
a1a=apply(a1[,c(3,5,6)],1,paste,collapse="")
a2=read.csv("mailArch2.csv",header=F,encoding="UTF-8",quote = "")
a2a=apply(a2[,c(3,5,6)],1,paste,collapse="")
d12=setdiff(a2a,a1a)
d12
head(a1)
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8",quote = "",sep="\t")
a2=read.csv("mailArch2.csv",header=F,encoding="UTF-8",quote = "",sep="\t")
a1
a1[,2:3]
?grep
substr(a1,10,20)
substr(a1[1],10,20)
substr(a1[1],10,20)
head(a1)
substr(a1[1,],30,20)
substr(a1[1,],30,40)
substr(a1[1,],20,70)
substr(a1[1,],20,120)
substr(a1[1,],10,110)
substr(a1[,],10,110)
substr(a1[,],8,110)
substr(a1[,],8,105)
substr(a1[,],8,108)
a1a=substr(a1[,],8,108)
a2a=substr(a2[,],8,108)
a2a
d12=setdiff(a2a,a1a)
d12
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8",quote = "",sep="\t")
a1
a1=read.csv("mailArch1.csv",header=F,encoding="UTF-8",quote = "")
a2=read.csv("mailArch2.csv",header=F,encoding="UTF-8",quote = "")
a1
head(a1)
require(RMySQL)
con <- tryCatch(dbConnect(MySQL(), user="JoernPloennigs", password="D1adafmd!", dbname="ll_warehouse", host="irillwarehouse01.mul.ie.ibm.com"), error=function(x) return(NULL))
con
con <- tryCatch(dbConnect(MySQL(), user="JoernPloennigs", password="D1adafmd!", dbname="ll_analytics", host="irillwarehouse01.mul.ie.ibm.com"), error=function(x) return(NULL))
dpids2exp=c(4:1068, 1074:1236, 1239:1248,1250:1260, 1262:1271, 1275:1397, 1399:1439, 1441:1645, 1699:1729, 1838:1855,  1873:2050, 2058:2064, 2121:2128,2132:2135,2146:2155,2158:2159,2328:2331)
dpids2exp=setdiff(dpids2exp, c(1197,1723:1729,1697,1698))
dpids2exp
dpids2exp
toJSON(dpids2exp)
require(rjson)
toJSON(dpids2exp)
dpids2exp=c(4:1068, 1074:1236, 1239:1248,1250:1260, 1262:1271, 1275:1397, 1399:1439, 1441:1645, 1699:1729, 1838:1855,  1873:2050, 2058:2064, 2121:2128,2132:2135,2146:2155,2158:2159,2328:2331,2688:2823,2680:3891,1,2,3,1073,1237,1249,1272:1274,3045)
dpids2exp=setdiff(dpids2exp, c(1197,1723:1729,1697,1698,840:1145)) #
toJSON(dpids2exp)
dpids2exp=c(4:1068, 1074:1236, 1239:1248,1250:1260, 1262:1271, 1275:1397, 1399:1439, 1441:1645, 1699:1729, 1838:1855,  1873:2050, 2058:2064, 2121:2128,2132:2135,2146:2155,2158:2159,2328:2331)
dpids2exp=setdiff(dpids2exp, c(1197,1723:1729,1697,1698, 14:839, 1262:1271, 1440:1635))
toJSON(dpids2exp)
mdata=read.csv("E:/Documents/Code/Data/IBM/CountOfSamplesPerDPv6.csv")
mdata
mdata=read.csv("E:/Documents/Code/Data/IBM/CountOfSamplesPerDPv6.csv",sep=";")
mdata2=mdata[mdata$dpid %in% dpids2exp]
mdata2=mdata[mdata$dpid %in% dpids2exp,]
head(mdata)
mdata2=mdata[mdata$DatapointID %in% dpids2exp,]
unique(mdata2$Label1)
library(reshape)
library(plyr)
library(stringr)
library(rjson)
library(party)
library(rpart)
require(XLConnect)
if (file.exists("C:/Program Files/Java/jdk1.7.0/jre")) Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.7.0/jre/')
if (file.exists("C:/Program Files (x86)/Java/jre1.8.0_20/jre")) Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_20/jre/')
if (file.exists("C:/Program Files/Java/jre1.8.0_25")) Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_25/')
if (require(XLConnect)) {
wb <- loadWorkbook("~/Code/Data/IBM/CountOfSamplesPerDPv6.xlsx")
dub2o=readWorksheet(wb, sheet = "CountOfSamplesPerDP4v")
write.table(dub2o,file="~/Code/Data/IBM/CountOfSamplesPerDPv6.csv", row.names=F,sep=";", quote = F)
write.table(dub2o,file="~/Code/OntGenerator/CountOfSamplesPerDPv6.csv", row.names=F,sep=";", quote = F)
} else {
dub2o=read.table(file="~/Code/Data/IBM/CountOfSamplesPerDPv6.csv", sep=";",header=T,stringsAsFactors=F)
}
toHaystack=c("temperature"="temp","setpoint"="sp","light"="lighting",'lightings'='lighting','condensator'='condenser',
"lighting percentage cmd"="lights", "zone illumination sensor"="lightLevel","presence sensor"="occupied",'burner'='boiler','cold'='cool',
'coolingtower'='coolingTower','electric'='elec','electriccharge'='electric charge','frequency'='freq','lux'="lightLevel",'illumination'="lightLevel",
'powerfactor'='pf','maximum'='maxVal','minimum'='minVal','occupancy'='occupied','supply'='discharge','max'='maxVal','min'='minVal', "percentage"="perc")
#c("electric", "percentage", "temperature", "presence", "illumination", "setpoint", "frequency", "discharge")
dub2o[,"Label2"][dub2o[,"Label2"]=="FCU_Air_Temperature_Cooling_Setpoint"]=NA
dub2o[,"Label1"][dub2o[,"Label1"]=="FCU_Air_Temperature_Heating_Setpoint"]="FCU_Air_Temperature_Setpoint"
dub2sem=tolower(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Label1"], dub2o[,"Label2"], dub2o[,"Label3"], dub2o[,"Label4"],dub2o[,"Label5"],dub2o[,"Label6"],sep="_"),"_NA","_"),"__","_"),"__","_"),"__","_"),"_$",""),"_"," "))
dub2loc=str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Project"], dub2o[,"Site"], dub2o[,"Building"], dub2o[,"Wing"], dub2o[,"BuildingStorey"],dub2o[,"Room"],dub2o[,"Zone"],dub2o[,"SubZone"],sep=">"),">NA",">"),">>",">"),">>",">"),">>",">"),">$","")
dub2as=str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Asset1"], dub2o[,"Asset2"], dub2o[,"Asset3"], dub2o[,"Asset4"], sep=">"),">NA",">"),">>",">"),">>",">"),">>",">"),">$","")
dub2sem=paste(dub2sem,str_replace(paste0(tolower(dub2o$AssetType),"Ref"),"NARef",""))
for (col in c("Site", "Building", "Room", "Zone"))
dub2sem=paste(dub2sem, paste(ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), tolower(col), ""), ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), paste0(tolower(col),"Ref"), "")))
dub2sem=str_trim(str_replace_all(dub2sem,"  "," "))
dub2hs=paste0(' ',dub2sem,' ') #workaround to replace whole words only
#for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, k, toHaystack[[k]])
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
dub2hs=str_trim(dub2hs)
dubtags=table(unlist(str_split(dub2hs,' ')))
haystack=fromJSON(file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/haystack.json")
hstags=names(haystack$tags)
print(dubtags[setdiff(names(dubtags),hstags)])
print(setdiff(hstags,names(dubtags)))
dub2hsS=str_split(dub2hs,' ')
dub2hs=unlist(llply(dub2hsS, function(l) paste0(intersect(l,hstags),collapse=" ")))
print(table(dub2sem))
print(table(dub2hs))
head(cleanedData)
dub2sem=paste(dub2sem,str_replace(paste0(tolower(dub2o$AssetType),"Ref"),"NARef",""))
for (col in c("Site", "Building", "Room", "Zone"))
dub2sem=paste(dub2sem, paste(ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), tolower(col), ""), ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), paste0(tolower(col),"Ref"), "")))
dub2sem=str_trim(str_replace_all(dub2sem,"  "," "))
dub2hs=paste0(' ',dub2sem,' ') #workaround to replace whole words only
#for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, k, toHaystack[[k]])
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
dub2hs=str_trim(dub2hs)
dubtags=table(unlist(str_split(dub2hs,' ')))
haystack=fromJSON(file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/haystack.json")
hstags=names(haystack$tags)
print(dubtags[setdiff(names(dubtags),hstags)])
print(setdiff(hstags,names(dubtags)))
dub2hsS=str_split(dub2hs,' ')
dub2hs=unlist(llply(dub2hsS, function(l) paste0(intersect(l,hstags),collapse=" ")))
print(table(dub2sem))
print(table(dub2hs))
dub2os=dub2o
dub2os$Location=dub2loc
dub2os$Asset=dub2as
#dub2os=dub2os[str_detect(dub2os$Location,">B3>") | str_detect(dub2os$Label1,"Electric_Meter"), ]
#dub2os=dub2os[dub2os$Label1!="Zone_Presence_Sensor",]
#dub2os=dub2os[!dub2os$DatapointID %in% c(1880:2028,2065:2114,2678), ]
dub2os=rename(dub2os[ ,c("DatapointID", "DataSource", "Label1", "Location", "AssetType", "Asset")], c("DataSource"="Label", "Label1"="Type"))
#write.table(dub2os, file="~/Code/Data/IBM/DataPointListIBM.csv", row.names=F, sep=";", quote = F)
#write.table(dub2os, file="~/Projects/TOPAs/svn/Baseline/IBM/DataPointListIBM.csv", row.names=F, sep=";", quote = F)
cleanedData=data.frame(bmslabel=dub2o$DataSource,id=dub2o$DatapointID,haystack=dub2hs,semantic=dub2sem,location=dub2loc,assetType=dub2o[,"AssetType"],asset=dub2as)
cleanedData=cleanedData[str_detect(cleanedData$location,">B3>"),]
cleanedData=cleanedData[!cleanedData$id %in% c(1880:2028,2065:2114,2678),]
cleanedData[cleanedData=="NA"]=NA
cleanedData$id=NULL
write.table(cleanedData,file="~/Code/RTCworkspace/EADT2/bead/data/DUB_B3.csv", row.names=F, sep=",", quote = F)
write.table(cleanedData,file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/DUB_B3_GROUND_TRUTH", row.names=F, sep=",", quote = F)
write.table(data.frame(bmslabel=cleanedData[,c("bmslabel")]),file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/DUB_B3_ORIGINAL_METADATA", row.names=F, sep=",", quote = F)
setwd('~/Code/Data/GroundTruth/IBM')
head(cleanedData)
cleanedData=data.frame(dub2o,id=dub2o$DatapointID,haystack=dub2hs,semantic=dub2sem,location=dub2loc,assetType=dub2o[,"AssetType"],asset=dub2as)
cleanedData=cleanedData[str_detect(cleanedData$location,">B3>"),]
cleanedData=cleanedData[!cleanedData$id %in% c(1880:2028,2065:2114,2678),]
cleanedData[cleanedData=="NA"]=NA
head(cleanedData)
setwd('~/Code/Data/GroundTruth/IBM')
fn="IBM_B3_relationships"
file.create(fn)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":",file=fn, append=T)
cat("    Metadata/Device/Tag/Full",cleanedData[row,"DataSource"],file=fn, append=T)
cat("    Metadata/Device/Tag/Value",str_replace(cleanedData[row,"Label1"],"_"," "),file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],file=fn, append=T)
if (!is.na(cleanedData[row,"Floor"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],file=fn, append=T)
}
cleanedData[row,"Building"]
setwd('~/Code/Data/GroundTruth/IBM')
fn="IBM_B3_relationships"
file.create(fn)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":",file=fn, append=T)
cat("    Metadata/Device/Tag/Full",cleanedData[row,"DataSource"],file=fn, append=T)
cat("    Metadata/Device/Tag/Value",str_replace(cleanedData[row,"Label1"],"_"," "),file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],file=fn, append=T)
if (!is.na(cleanedData[row,"BuildingStorey"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],file=fn, append=T)
}
setwd('~/Code/Data/GroundTruth/IBM')
fn="IBM_B3_relationships"
cat("",file=fn, append=F)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":",file=fn, append=T)
cat("    Metadata/Device/Tag/Full",cleanedData[row,"DataSource"],"\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Value",str_replace(cleanedData[row,"Label1"],"_"," "),"\n",file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"BuildingStorey"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],"\n",file=fn, append=T)
}
setwd('~/Code/Data/GroundTruth/IBM')
fn="IBM_B3_relationships"
cat("",file=fn, append=F)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Full ->",cleanedData[row,"DataSource"],"\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Value ->",str_replace_all(cleanedData[row,"Label1"],"_"," "),"\n",file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"BuildingStorey"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],"\n",file=fn, append=T)
}
head(cleanedData)
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
dub2sem=paste(dub2sem,str_replace(paste0(tolower(dub2o$AssetType),"Ref"),"NARef",""))
for (col in c("Site", "Building", "Room", "Zone"))
dub2sem=paste(dub2sem, paste(ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), tolower(col), ""), ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), paste0(tolower(col),"Ref:",tolower(dub2o[[col]])), "")))
dub2sem=str_trim(str_replace_all(dub2sem,"  "," "))
dub2hs=paste0(' ',dub2sem,' ') #workaround to replace whole words only
#for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, k, toHaystack[[k]])
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
dub2hs=str_trim(dub2hs)
dubtags=table(unlist(str_split(dub2hs,' ')))
haystack=fromJSON(file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/haystack.json")
hstags=names(haystack$tags)
print(dubtags[setdiff(names(dubtags),hstags)])
print(setdiff(hstags,names(dubtags)))
dub2hsS=str_split(dub2hs,' ')
dub2hs=unlist(llply(dub2hsS, function(l) paste0(intersect(l,hstags),collapse=" ")))
print(table(dub2sem))
print(table(dub2hs))
dub2os=dub2o
dub2os$Location=dub2loc
dub2os$Asset=dub2as
#dub2os=dub2os[str_detect(dub2os$Location,">B3>") | str_detect(dub2os$Label1,"Electric_Meter"), ]
#dub2os=dub2os[dub2os$Label1!="Zone_Presence_Sensor",]
#dub2os=dub2os[!dub2os$DatapointID %in% c(1880:2028,2065:2114,2678), ]
dub2os=rename(dub2os[ ,c("DatapointID", "DataSource", "Label1", "Location", "AssetType", "Asset")], c("DataSource"="Label", "Label1"="Type"))
#write.table(dub2os, file="~/Code/Data/IBM/DataPointListIBM.csv", row.names=F, sep=";", quote = F)
#write.table(dub2os, file="~/Projects/TOPAs/svn/Baseline/IBM/DataPointListIBM.csv", row.names=F, sep=";", quote = F)
cleanedData=data.frame(bmslabel=dub2o$DataSource,id=dub2o$DatapointID,haystack=dub2hs,semantic=dub2sem,location=dub2loc,assetType=dub2o[,"AssetType"],asset=dub2as)
cleanedData=cleanedData[str_detect(cleanedData$location,">B3>"),]
cleanedData=cleanedData[!cleanedData$id %in% c(1880:2028,2065:2114,2678),]
cleanedData[cleanedData=="NA"]=NA
cleanedData$id=NULL
write.table(cleanedData,file="~/Code/RTCworkspace/EADT2/bead/data/DUB_B3.csv", row.names=F, sep=",", quote = F)
write.table(cleanedData,file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/DUB_B3_GROUND_TRUTH", row.names=F, sep=",", quote = F)
write.table(data.frame(bmslabel=cleanedData[,c("bmslabel")]),file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/DUB_B3_ORIGINAL_METADATA", row.names=F, sep=",", quote = F)
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
dub2hs
dub2sem
dub2sem=tolower(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Label1"], dub2o[,"Label2"], dub2o[,"Label3"], dub2o[,"Label4"],dub2o[,"Label5"],dub2o[,"Label6"],sep="_"),"_NA","_"),"__","_"),"__","_"),"__","_"),"_$",""),"_"," "))
dub2sem=paste(dub2sem,ifelse(dub2o$AssetType!="" & !is.na(dub2o$AssetType) & dub2o$Asset1!="" & !is.na(dub2o$Asset1), paste0(tolower(dub2o$AssetType),"Ref:",tolower(dub2o$Asset1)), ""))
for (col in c("Site", "Building", "Room", "Zone"))
dub2sem=paste(dub2sem, paste(ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), tolower(col), ""), ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), paste0(tolower(col),"Ref:",tolower(dub2o[[col]])), "")))
dub2sem=str_trim(str_replace_all(dub2sem,"  "," "))
dub2sem
dub2sem=tolower(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Label1"], dub2o[,"Label2"], dub2o[,"Label3"], dub2o[,"Label4"],dub2o[,"Label5"],dub2o[,"Label6"],sep="_"),"_NA","_"),"__","_"),"__","_"),"__","_"),"_$",""),"_"," "))
dub2loc=str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Project"], dub2o[,"Site"], dub2o[,"Building"], dub2o[,"Wing"], dub2o[,"BuildingStorey"],dub2o[,"Room"],dub2o[,"Zone"],dub2o[,"SubZone"],sep=">"),">NA",">"),">>",">"),">>",">"),">>",">"),">$","")
dub2as=str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Asset1"], dub2o[,"Asset2"], dub2o[,"Asset3"], dub2o[,"Asset4"], sep=">"),">NA",">"),">>",">"),">>",">"),">>",">"),">$","")
#dub2sem=paste(dub2sem,str_replace(paste0(tolower(dub2o$AssetType),"Ref"),"NARef",""))
dub2sem=paste(dub2sem,ifelse(dub2o$AssetType!="" & !is.na(dub2o$AssetType) & dub2o$Asset1!="" & !is.na(dub2o$Asset1), paste0(tolower(dub2o$AssetType),"Ref:",dub2o$Asset1), ""))
for (col in c("Site", "Building", "Room", "Zone"))
dub2sem=paste(dub2sem, paste(ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), tolower(col), ""), ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), paste0(tolower(col),"Ref:",dub2o[[col]]), "")))
dub2sem=str_trim(str_replace_all(dub2sem,"  "," "))
dub2sem
dub2o[,"Label2"][dub2o[,"Label2"]=="FCU_Air_Temperature_Cooling_Setpoint"]=NA
dub2o[,"Label1"][dub2o[,"Label1"]=="FCU_Air_Temperature_Heating_Setpoint"]="FCU_Air_Temperature_Setpoint"
dub2sem=tolower(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Label1"], dub2o[,"Label2"], dub2o[,"Label3"], dub2o[,"Label4"],dub2o[,"Label5"],dub2o[,"Label6"],sep="_"),"_NA","_"),"__","_"),"__","_"),"__","_"),"_$",""),"_"," "))
dub2loc=str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Project"], dub2o[,"Site"], dub2o[,"Building"], dub2o[,"Wing"], dub2o[,"BuildingStorey"],dub2o[,"Room"],dub2o[,"Zone"],dub2o[,"SubZone"],sep=">"),">NA",">"),">>",">"),">>",">"),">>",">"),">$","")
dub2as=str_replace_all(str_replace_all(str_replace_all(str_replace_all(str_replace_all(paste(dub2o[,"Asset1"], dub2o[,"Asset2"], dub2o[,"Asset3"], dub2o[,"Asset4"], sep=">"),">NA",">"),">>",">"),">>",">"),">>",">"),">$","")
#dub2sem=paste(dub2sem,str_replace(paste0(tolower(dub2o$AssetType),"Ref"),"NARef",""))
dub2sem=paste(dub2sem,ifelse(dub2o$AssetType!="" & !is.na(dub2o$AssetType) & dub2o$Asset1!="" & !is.na(dub2o$Asset1), paste0(tolower(dub2o$AssetType),"Ref:",dub2o$Asset1), ""))
for (col in c("Site", "Building", "Room", "Zone"))
dub2sem=paste(dub2sem, paste(ifelse(dub2o[[col]]!="" & !is.na(dub2o[[col]]), paste0(tolower(col),"Ref:",dub2o[[col]]), "")))
dub2sem=str_trim(str_replace_all(dub2sem,"  "," "))
head(dub2sem)
dub2hs=paste0(' ',dub2sem,' ') #workaround to replace whole words only
#for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, k, toHaystack[[k]])
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' '))
dub2hs=str_trim(dub2hs)
dub2hs=paste0(' ',dub2sem,' ') #workaround to replace whole words only
#for (k in names(toHaystack)) dub2hs=str_replace(dub2hs, k, toHaystack[[k]])
for (k in names(toHaystack)) dub2hs=str_replace(str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' ')), paste0(' ',k,':'), paste0(' ',toHaystack[[k]],':'))
for (k in names(toHaystack)) dub2hs=str_replace(str_replace(dub2hs, paste0(' ',k,' '), paste0(' ',toHaystack[[k]],' ')), paste0(' ',k,':'), paste0(' ',toHaystack[[k]],':'))
dub2hs=str_trim(dub2hs)
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
cleanedData=data.frame(bmslabel=dub2o$DataSource,id=dub2o$DatapointID,haystack=dub2hs,semantic=dub2sem,location=dub2loc,assetType=dub2o[,"AssetType"],asset=dub2as)
cleanedData=cleanedData[str_detect(cleanedData$location,">B3>"),]
cleanedData=cleanedData[!cleanedData$id %in% c(1880:2028,2065:2114,2678),]
cleanedData[cleanedData=="NA"]=NA
cleanedData$id=NULL
write.table(cleanedData,file="~/Code/RTCworkspace/EADT2/bead/data/DUB_B3.csv", row.names=F, sep=",", quote = F)
write.table(cleanedData,file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/DUB_B3_GROUND_TRUTH", row.names=F, sep=",", quote = F)
write.table(data.frame(bmslabel=cleanedData[,c("bmslabel")]),file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/DUB_B3_ORIGINAL_METADATA", row.names=F, sep=",", quote = F)
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
cleanedData=data.frame(dub2o,id=dub2o$DatapointID,haystack=dub2hs,semantic=dub2sem,location=dub2loc,assetType=dub2o[,"AssetType"],asset=dub2as)
cleanedData=cleanedData[str_detect(cleanedData$location,">B3>"),]
cleanedData=cleanedData[!cleanedData$id %in% c(1880:2028,2065:2114,2678),]
cleanedData[cleanedData=="NA"]=NA
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
head(cleanedData)
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
fn="IBM_B3_relationships"
cat("",file=fn, append=F)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Full ->",cleanedData[row,"DataSource"],"\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Value ->",str_replace_all(cleanedData[row,"Label1"],"_"," "),"\n",file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],"\n",file=fn, append=T)
cat("    Metadata/Haystack -> ",cleanedData[row,"haystack"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"BuildingStorey"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],"\n",file=fn, append=T)
}
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
fn="IBM_B3_relationships"
cat("",file=fn, append=F)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Full ->",cleanedData[row,"DataSource"],"\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Value ->",str_replace_all(cleanedData[row,"Label1"],"_"," "),"\n",file=fn, append=T)
cat("    Metadata/Haystack -> ",cleanedData[row,"haystack"],"\n",file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"BuildingStorey"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],"\n",file=fn, append=T)
}
hstags
dubtags=table(unlist(str_split(dub2hs,' ')))
haystack=fromJSON(file="~/Code/RTCworkspace/EADT2/Berkeley-IBM-UVA/haystack.json")
hstags=names(haystack$tags)
haystack=fromJSON(file="~/Code/Data/Berkeley-IBM-UVA/haystack.json")
hstags=names(haystack$tags)
hstags
dubtags=table(unlist(str_split(dub2hs,' ')))
haystack=fromJSON(file="~/Code/Data/Berkeley-IBM-UVA/haystack.json")
hstags=names(haystack$tags)
print(dubtags[setdiff(names(dubtags),hstags)])
print(setdiff(hstags,names(dubtags)))
dub2hsS=str_split(dub2hs,' ')
dub2hs=unlist(llply(dub2hsS, function(l) paste0(intersect(l,hstags),collapse=" ")))
print(table(dub2sem))
print(table(dub2hs))
hstags
dub2hs
print(table(dub2sem))
print(table(dub2hs))
hstags=names(haystack$tags)
hstags
hstags[str_detect("Ref",hstags)]
hstags[str_detect("Ref",hstags),]
hstags[str_detect("Ref",hstags)]
str_detect("Ref",hstags)
hstags
str_detect("*Ref",hstags)
str_detect(".*Ref",hstags)
hstags[str_detect(hstags,"Ref")]
dub2hsS
dub2sem
for (rtag in unique(hstags[str_detect(hstags,"Ref")])) {
sf=str_detect(dub2sem, rtag)
if (sum(sf)>0){
print(rtag)
sm=str_match(dub2sem,paste0(rtag,":","([^ ]*)"))[,2]
}
}
for (rtag in unique(hstags[str_detect(hstags,"Ref")])) {
sf=str_detect(dub2sem, rtag)
if (sum(sf)>0){
print(rtag)
sm=str_match(dub2sem[sf,],paste0(rtag,":","([^ ]*)"))[,2]
print(sm)
#dub2hs[sf,]=paste(dub2hs[sf,], sm)
}
}
sm=str_match(dub2sem[sf,],paste0(rtag,":","([^ ]*)"))[,2]
str_match(dub2sem[sf,],paste0(rtag,":","([^ ]*)"))
sf
str_match(dub2sem,paste0(rtag,":","([^ ]*)"))
str_match(dub2sem,paste0(rtag,":","([^ ]*)"))[,2]
str_match(dub2sem,paste0("(",rtag,":","[^ ]*)"))[,2]
str_match(dub2sem[sf,],paste0("(",rtag,":","[^ ]*)"))[,2]
str_match(dub2sem,paste0("(",rtag,":","[^ ]*)"))[,2]
for (rtag in unique(hstags[str_detect(hstags,"Ref")])) {
sf=str_detect(dub2sem, rtag)
if (sum(sf)>0){
print(rtag)
sm=str_match(dub2sem,paste0("(",rtag,":","[^ ]*)"))[,2]
dub2hs[!is.na(sm),]=paste(dub2hs[sf,], sm)
}
}
for (rtag in unique(hstags[str_detect(hstags,"Ref")])) {
sf=str_detect(dub2sem, rtag)
if (sum(sf)>0){
print(rtag)
sm=str_match(dub2sem,paste0("(",rtag,":","[^ ]*)"))[,2]
dub2hs[!is.na(sm),]=paste(dub2hs[!is.na(sm),], sm)
}
}
print(table(dub2sem))
print(table(dub2hs))
head(dub2hs)
dub2hs[!is.na(sm),]
print(table(dub2hs))
print(rtag)
sm=str_match(dub2sem,paste0("(",rtag,":","[^ ]*)"))[,2]
sm
ifelse(is.na(sm),sm,"")
ifelse(!is.na(sm),sm,"")
paste(dub2hs, ifelse(!is.na(sm),sm,""))
for (rtag in unique(hstags[str_detect(hstags,"Ref")])) {
sf=str_detect(dub2sem, rtag)
if (sum(sf)>0){
print(rtag)
sm=str_match(dub2sem,paste0("(",rtag,":","[^ ]*)"))[,2]
dub2hs=paste(dub2hs, ifelse(!is.na(sm),sm,""))
}
}
print(table(dub2sem))
print(table(dub2hs))
dub2hs=str_trim(str_replace_all(dub2hs,"  "," "))
dub2hs
cleanedData=data.frame(dub2o,id=dub2o$DatapointID,haystack=dub2hs,semantic=dub2sem,location=dub2loc,assetType=dub2o[,"AssetType"],asset=dub2as)
cleanedData=cleanedData[str_detect(cleanedData$location,">B3>"),]
cleanedData=cleanedData[!cleanedData$id %in% c(1880:2028,2065:2114,2678),]
cleanedData[cleanedData=="NA"]=NA
setwd('~/Code/Data/GroundTruth/IBM')
write.table(rename(cleanedData[,c("DataSource","haystack")],c("DataSource"="Label")),file="IBM_B3_haystack", row.names=F, sep=",", quote = F)
fn="IBM_B3_relationships"
cat("",file=fn, append=F)
for (row in 1:nrow(cleanedData)){
cat(cleanedData[row,2],":\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Full ->",cleanedData[row,"DataSource"],"\n",file=fn, append=T)
cat("    Metadata/Device/Tag/Value ->",str_replace_all(cleanedData[row,"Label1"],"_"," "),"\n",file=fn, append=T)
cat("    Metadata/Haystack -> ",cleanedData[row,"haystack"],"\n",file=fn, append=T)
cat("    Metadata/Location/Site -> ",cleanedData[row,"Site"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Building"]))cat("    Metadata/Location/Building -> ",cleanedData[row,"Building"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Wing"]))cat("    Metadata/Location/Wing -> ",cleanedData[row,"Wing"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"BuildingStorey"])) cat("    Metadata/Location/Floor -> ",cleanedData[row,"BuildingStorey"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Room"])) cat("    Metadata/Location/Room -> ",cleanedData[row,"Room"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Zone"])) cat("    Metadata/Location/Zone -> ",cleanedData[row,"Zone"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"AssetType"])) cat("    Metadata/Systems/Type -> ",cleanedData[row,"AssetType"],"\n",file=fn, append=T)
if (!is.na(cleanedData[row,"Asset1"])) cat("    Metadata/Systems/Asset/ -> ",cleanedData[row,"Asset1"],"\n",file=fn, append=T)
}
