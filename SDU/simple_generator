#!/usr/bin/env python

from rdflib import Graph, Namespace, URIRef, Literal
import rdflib
import json

################################################################################
############################################################## front matter ####
################################################################################

BRICK = Namespace(rdflib.term.URIRef('http://www.semanticweb.org/jbkoh/ontologies/2016/4/untitled-ontology-27#'))
RDF = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
XTRA = Namespace('extras/')

g = Graph()
#s = g.parse('../BuildingSchema/Brick.owl', format='turtle', publicID='brick')
s = g.parse('../BuildingSchema/Brick.ttl', format='turtle', publicID='brick')
g.bind('rdf', RDF)
g.bind('brick', BRICK)

################################################################################
################################################################ constructs ####
################################################################################

def vav (prefix, data):
    # actors
    entity_vav                = URIRef(prefix+'/vav')
    entity_supply_valve       = URIRef(prefix+'/supply_valve')
    entity_return_valve       = URIRef(prefix+'/return_valve')
    entity_supply_pressure    = URIRef(prefix+'/supply_pressure')
    entity_cooling_coil       = URIRef(prefix+'/cooling_coil')
    entity_supply_temperature = URIRef(prefix+'/supply_temperature')
    rooms = map(lambda name: URIRef(prefix+'/rooms/'+name), data)
    
    
    # types
    g.add( (entity_vav, RDF.type, BRICK['VAV']) )
    g.add( (entity_supply_valve, RDF.type, BRICK['Damper']) )
    g.add( (entity_return_valve, RDF.type, BRICK['Damper']) )
    g.add( (entity_supply_pressure, RDF.type, BRICK['Air_Pressure_Sensor']) )
    g.add( (entity_cooling_coil, RDF.type, BRICK['Cooling_Coil']) )
    g.add( (entity_supply_temperature, RDF.type, BRICK['Temperature_Sensor']) )
    
    # relationships
    g.add( (entity_supply_valve, BRICK['hasTagSet'], BRICK['Supply_Air']) )
    g.add( (entity_return_valve, BRICK['hasTagSet'], BRICK['Return_Air']) )
    
    

def vavs (prefix):
    with open('gtc_vavs.json') as fo:
        vavs_data = json.loads(''.join(fo.readlines()))
    
    for i in range(len(vavs_data)):
        vav_data = vavs_data[i]
        vav(prefix+'/'+str(i), vav_data)

def building (prefix):
    vavs(prefix+'/vavs')

################################################################################
###################################################################### main ####
################################################################################

prefix = 'building:gtc'

# building
b = building(prefix)

################################################################################
############################################################### back matter ####
################################################################################

g.serialize('sdu_gtc_simple.ttl', 'turtle')

