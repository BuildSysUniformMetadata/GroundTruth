#!/usr/bin/env python

from rdflib import Graph, Namespace, URIRef

################################################################################
############################################################## front matter ####
################################################################################

BS = Namespace('http://www.semanticweb.org/jbkoh/ontologies/2016/4/BuildingSchema#')
RDF = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')

g = Graph()
g.bind('rdf', RDF)
g.bind('bs', BS)

################################################################################
################################################################ constructs ####
################################################################################

def flow_meter (prefix):
    # actors
    flow_sensor = URIRef(prefix+'/flow_sensor')
    supply_temperature_sensor = URIRef(prefix+'/supply_temperature_sensor')
    return_temperature_sensor = URIRef(prefix+'/return_temperature_sensor')
    power_calculator = URIRef(prefix+'/power_calculator')
    
    # types
    g.add( (flow_sensor, RDF.type, BS['Hot_Water_Flow']) )
    g.add( (flow_sensor, RDF.type, BS['Sensor']) )
    g.add( (supply_temperature_sensor, RDF.type, BS['Hot_Water_Supply_Temperature']) )
    g.add( (supply_temperature_sensor, RDF.type, BS['Sensor']) )
    g.add( (return_temperature_sensor, RDF.type, BS['Hot_Water_Return_Temperature']) )
    g.add( (return_temperature_sensor, RDF.type, BS['Sensor']) )
    g.add( (power_calculator, RDF.type, BS['Power']) )
    g.add( (power_calculator, RDF.type, BS['Sensor']) )
    
    # relationships
    g.add( (flow_sensor, BS.feeds, supply_temperature_sensor) )
    g.add( (flow_sensor, BS.feeds, power_calculator) )
    g.add( (supply_temperature_sensor, BS.feeds, power_calculator) )
    g.add( (return_temperature_sensor, BS.feeds, power_calculator) )
    
    # ports
    ports = {
      'supply': [flow_sensor],
      'metered supply': [supply_temperature_sensor],
      'return': [return_temperature_sensor],
      'metered return': [return_temperature_sensor],
    }
    return ports

def heat_exchanger (prefix):
    # actors
    primary_surface = URIRef(prefix+'/primary')
    secondary_surface = URIRef(prefix+'/secondary')
    exchanger = URIRef(prefix+'/exchanger')
    
    # types
    g.add( (primary_surface, RDF.type, BS['Coil']) )
    g.add( (secondary_surface, RDF.type, BS['Coil']) )
    g.add( (exchanger, RDF.type, BS['System']) )
    
    # relationships
    g.add( (primary_surface, BS.feeds, exchanger) )
    g.add( (secondary_surface, BS.feeds, exchanger) )
    g.add( (exchanger, BS.feeds, primary_surface) )
    g.add( (exchanger, BS.feeds, secondary_surface) )
    
    # ports
    ports = {
        'primary input': [primary_surface],
        'primary output': [primary_surface],
        'control': [exchanger],
        'secondary input': [secondary_surface],
        'secondary output': [secondary_surface],
    }
    return ports

################################################################################
###################################################################### main ####
################################################################################

prefix = 'building:gtc'

# building
building = URIRef(prefix)
g.add( (building, RDF.type, BS['Building']) )

fm = flow_meter(prefix+'/flowmeter')
he = heat_exchanger(prefix+'/heatexchanger')

################################################################################
############################################################### back matter ####
################################################################################

g.serialize('sdu_gtc.ttl', 'turtle')

