#!/usr/bin/env python

from rdflib import Graph, Namespace, URIRef, Literal
import rdflib
import json

"""
TODO:
- add media relations
- find a better name for IJ_Valve_Functional_Block
- what is the difference between isLocatedIn and partOf?
- define Celcius_Temperature_Sensor
"""

################################################################################
############################################################## front matter ####
################################################################################

RDF        = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
RDFS       = Namespace('http://www.w3.org/2000/01/rdf-schema#')
BRICK      = Namespace('http://buildsys.org/ontologies/Brick#')
BRICKFRAME = Namespace('http://buildsys.org/ontologies/BrickFrame#')
BRICKTAG   = Namespace('http://buildsys.org/ontologies/BrickTag#')

g = Graph()
g.parse('../BuildingSchema/Brick.ttl', format='turtle')
g.parse('../BuildingSchema/BrickFrame.ttl', format='turtle')
g.parse('../BuildingSchema/BrickTag.ttl', format='turtle')
g.bind('rdf'  , RDF)
g.bind('rdfs' , RDFS)
g.bind('brick', BRICK)
g.bind('bf'   , BRICKFRAME)
g.bind('btag' , BRICKTAG)

# building
GTC = Namespace('http://buildsys.org/ontologies/building_example#')
g.bind('gtc', GTC)

################################################################################
################################################################ constructs ####
################################################################################

def gen_extensions():
    Heat_Power_Meter_Functional_Block = GTC['Heat_Power_Meter_Functional_Block']
    Heat_Transfer_Box_Functional_Block = GTC['Heat_Transfer_Box_Functional_Block']
    GTC_VAV_Functional_Block = GTC['GTC_VAV_Functional_Block']
    IJ_Valve_Functional_Block = GTC['IJ_Valve_Functional_Block']
    GTC_Filter_Element_Functional_Block = GTC['GTC_Filter_Element_Functional_Block']
    DPT_Functional_Block = GTC['DPT_Functional_Block']
    
    g.add( (Heat_Power_Meter_Functional_Block, RDF.isSubClassOf, BRICK['Functional_Block']) )
    g.add( (Heat_Transfer_Box_Functional_Block, RDF.isSubClassOf, BRICK['Functional_Block']) )
    g.add( (GTC_VAV_Functional_Block, RDF.isSubClassOf, BRICK['Functional_Block']) )
    g.add( (IJ_Valve_Functional_Block, RDF.isSubClassOf, BRICK['Functional_Block']) )
    g.add( (GTC_Filter_Element_Functional_Block, RDF.isSubClassOf, BRICK['Functional_Block']) )
    g.add( (DPT_Functional_Block, RDF.isSubClassOf, BRICK['Functional_Block']) )
    

# instantiate a heat exchanger
def gen_hx (prefix):
    fb = GTC[prefix+'/fb']
    pi = GTC[prefix+'/port[pi]']
    po = GTC[prefix+'/port[po]']
    si = GTC[prefix+'/port[si]']
    so = GTC[prefix+'/port[so]']
    
    # types
    g.add( (fb, RDF.type, BRICK['Heat_Exchanger_Functional_Block']) )
    g.add( (pi, RDF.type, BRICK['Heat_Exchanger_Primary_Input']) )
    g.add( (po, RDF.type, BRICK['Heat_Exchanger_Primary_Output']) )
    g.add( (si, RDF.type, BRICK['Heat_Exchanger_Secondary_Input']) )
    g.add( (so, RDF.type, BRICK['Heat_Exchanger_Secondary_Output']) )
    
    # partOf
    g.add( (pi, BRICK['partOf'], fb) )
    g.add( (po, BRICK['partOf'], fb) )
    g.add( (si, BRICK['partOf'], fb) )
    g.add( (so, BRICK['partOf'], fb) )
    
    ports = {
        'fb': fb,
        'pi': pi,
        'po': po,
        'si': si,
        'so': so,
    }
    return ports

# instantiate a heating power meter (measures power based on flow and temperature drop)
def gen_heating_power_meter (prefix):
    fb          = GTC[prefix+'/fb']
    s           = GTC[prefix+'/port[supply]']
    r           = GTC[prefix+'/port[return]']
    ms          = GTC[prefix+'/port[metered_supply]']
    mr          = GTC[prefix+'/port[metered_return]']
    flow        = GTC[prefix+'/flow']
    supply_temp = GTC[prefix+'/supply_temp']
    return_temp = GTC[prefix+'/return_temp']
    power       = GTC[prefix+'/power']
    
    # types
    g.add( (fb, RDF.type, GTC['Heat_Power_Meter_Functional_Block']) )
    g.add( (s, RDF.type, GTC['Heat_Power_Meter_Supply']) )
    g.add( (r, RDF.type, GTC['Heat_Power_Meter_Return']) )
    g.add( (ms, RDF.type, GTC['Heat_Power_Meter_Metered_Supply']) )
    g.add( (mr, RDF.type, GTC['Heat_Power_Meter_Metered_Return']) )
    g.add( (flow, RDF.type, GTC['Flow_Sensor']) )
    g.add( (supply_temp, RDF.type, GTC['Temperature_Sensor']) )
    g.add( (return_temp, RDF.type, GTC['Temperature_Sensor']) )
    g.add( (power, RDF.type, GTC['Heating_Power_Calculation']) )
    
    # partOf
    g.add( (s, BRICK['partOf'], fb) )
    g.add( (r, BRICK['partOf'], fb) )
    g.add( (ms, BRICK['partOf'], fb) )
    g.add( (mr, BRICK['partOf'], fb) )
    g.add( (flow, BRICK['partOf'], fb) )
    g.add( (supply_temp, BRICK['partOf'], fb) )
    g.add( (return_temp, BRICK['partOf'], fb) )
    g.add( (power, BRICK['partOf'], fb) )
    
    # feeds
    g.add( (s, BRICK['feeds'], flow) )
    g.add( (flow, BRICK['feeds'], supply_temp) )
    g.add( (supply_temp, BRICK['feeds'], mr) )
    g.add( (mr, BRICK['feeds'], return_temp) )
    g.add( (return_temp, BRICK['feeds'], r) )
    
    # controls
    g.add( (flow, BRICK['feeds'], power) )
    g.add( (supply_temp, BRICK['feeds'], power) )
    g.add( (return_temp, BRICK['feeds'], power) )
    
    ports = {
        'fb': fb,
        'supply': s,
        'return': r,
        'metered_supply': ms,
        'metered_return': mr,
    }
    return ports

# instantiation of a grouping of a heating power meter, heat exchanger, pump and two temperature sensors
def gen_heat_transfer_box (prefix):
    fb          = GTC[prefix+'/fb']
    pi          = GTC[prefix+'/port[pi]']
    po          = GTC[prefix+'/port[po]']
    si          = GTC[prefix+'/port[si]']
    so          = GTC[prefix+'/port[so]']
    hpm         = gen_heating_power_meter(prefix+'/hpm')
    hx          = gen_hx(prefix+'/hx')
    pump        = GTC[prefix+'/pump']
    supply_temp = GTC[prefix+'/supply_temp']
    return_temp = GTC[prefix+'/return_temp']
    
    # types
    g.add( (fb, RDF.type, GTC['Heat_Transfer_Box_Functional_Block']) )
    g.add( (pi, RDF.type, GTC['Heat_Transfer_Box_Primary_Input']) )
    g.add( (po, RDF.type, GTC['Heat_Transfer_Box_Primary_Output']) )
    g.add( (si, RDF.type, GTC['Heat_Transfer_Box_Secondary_Input']) )
    g.add( (so, RDF.type, GTC['Heat_Transfer_Box_Secondary_Output']) )
    g.add( (pump, RDF.type, GTC['Pump']) )
    g.add( (supply_temp, RDF.type, GTC['Temperature_Sensor']) )
    g.add( (return_temp, RDF.type, GTC['Temperature_Sensor']) )
    
    # partOf
    g.add( (pi, BRICK['partOf'], fb) )
    g.add( (po, BRICK['partOf'], fb) )
    g.add( (si, BRICK['partOf'], fb) )
    g.add( (so, BRICK['partOf'], fb) )
    g.add( (hpm['bf'], BRICK['partOf'], fb) )
    g.add( (hx['bf'], BRICK['partOf'], fb) )
    g.add( (pump, BRICK['partOf'], fb) )
    g.add( (supply_temp, BRICK['partOf'], fb) )
    g.add( (return_temp, BRICK['partOf'], fb) )
    
    # feeds
    g.add( (pi, BRICK['feeds'], hpm['pi']) )
    g.add( (hpm['so'], BRICK['feeds'], hx['pi']) )
    g.add( (hx['po'], BRICK['feeds'], hpm['si']) )
    g.add( (hpm['po'], BRICK['feeds'], po) )
    g.add( (so, BRICK['feeds'], return_temp) )
    g.add( (return_temp, BRICK['feeds'], hx['si']) )
    g.add( (hx['so'], BRICK['feeds'], pump) )
    g.add( (pump, BRICK['feeds'], supply_temp) )
    g.add( (supply_temp, BRICK['feeds'], so) )
    
    ports = {
        'fb': fb,
        'pi': pi,
        'po': po,
        'si': si,
        'so': so,
    }
    return ports

# instantiate a valve with i inputs and j outputs (usually for 3-way valves)
def gen_ij_valve (prefix, input_count, output_count):
    fb = GTC[prefix+'/fb']
    i  = map(lambda: index: GTC[prefix+'/port[i-'+str(index)+']'] , range(input_count))
    ic = map(lambda: index: GTC[prefix+'/port[ic-'+str(index)+']'], range(input_count))
    o  = map(lambda: index: GTC[prefix+'/port[o-'+str(index)+']'] , range(output_count))
    oc = map(lambda: index: GTC[prefix+'/port[oc-'+str(index)+']'], range(output_count))
    
    # types
    g.add( (fb, RDF.type, GTC['IJ_Valve_Functional_Block']) )
    for entity in i:
        g.add( (entity, RDF.type, GTC['IJ_Valve_Input']) )
    for entity in ic:
        g.add( (entity, RDF.type, GTC['IJ_Valve_Input_control']) )
    for entity in o:
        g.add( (entity, RDF.type, GTC['IJ_Valve_Output']) )
    for entity in oc:
        g.add( (entity, RDF.type, GTC['IJ_Valve_Output_control']) )
    
    # partOf
    for entity in i+ic+o+oc:
        g.add( (entity, BRICK['partOf'], fb) )
    
    # feeds
    for index in range(input_count):
        g.add( (i[index], BRICK['feeds'], ic[index]) )
    for input_index in range(input_count):
        for output_index in range(output_count):
            g.add( (ic[input_index], BRICK['feeds'], oc[output_index]) )
    for index in range(output_count):
        g.add( (oc[index], BRICK['feeds'], o[index]) )
    
    ports = {
        'fb': fb,
        'i':  i, # input
        'ic': c, # inout control
        'o':  o, # output
        'ic': c, # output control
    }
    return ports

def gen_vav (prefix):
    fb              = GTC[prefix+'/fb']
    ui              = GTC[prefix+'/port[ui]']
    uo              = GTC[prefix+'/port[uo]']
    di              = GTC[prefix+'/port[di]']
    do              = GTC[prefix+'/port[do]']
    ci              = GTC[prefix+'/port[ci]']
    co              = GTC[prefix+'/port[co]']
    hx              = gen_hx(prefix+'/hx')
    controller      = GTC[prefix+'/controller']
    supply_damper   = GTC[prefix+'/supply_damper']
    return_damper   = GTC[prefix+'/return_damper']
    upstream_temp   = GTC[prefix+'/upstream_temp']
    downstream_temp = GTC[prefix+'/downstream_temp']
    cooled_flow     = GTC[prefix+'/cooled_flow']
    cooled_valve    = gen_hx(prefix+'/cooled_valve', 2, 1)
    
    # types
    g.add( (fb, RDF.type, GTC['GTC_VAV_Functional_Block']) )
    g.add( (ui, RDF.type, GTC['GTC_VAV_Upstream_Input']) )
    g.add( (uo, RDF.type, GTC['GTC_VAV_Upstream_Output']) )
    g.add( (di, RDF.type, GTC['GTC_VAV_Downstream_Input']) )
    g.add( (do, RDF.type, GTC['GTC_VAV_Downstream_Output']) )
    g.add( (ci, RDF.type, GTC['GTC_VAV_Cooled_input']) )
    g.add( (co, RDF.type, GTC['GTC_VAV_Cooled_Output']) )
    g.add( (controller, RDF.type, GTC['Controller']) )
    g.add( (supply_damper, RDF.type, GTC['Damper']) )
    g.add( (return_damper, RDF.type, GTC['Damper']) )
    g.add( (upstream_temp, RDF.type, GTC['Temperature_Sensor']) )
    g.add( (downstream_temp, RDF.type, GTC['Temperature_Sensor']) )
    g.add( (cooled_flow, RDF.type, GTC['Flow_Meter']) )
    
    # partOf
    g.add( (ui, BRICK['partOf'], fb) )
    g.add( (uo, BRICK['partOf'], fb) )
    g.add( (di, BRICK['partOf'], fb) )
    g.add( (do, BRICK['partOf'], fb) )
    g.add( (ci, BRICK['partOf'], fb) )
    g.add( (co, BRICK['partOf'], fb) )
    g.add( (hx['bf'], BRICK['partOf'], fb) )
    g.add( (controller, BRICK['partOf'], fb) )
    g.add( (supply_damper, BRICK['partOf'], fb) )
    g.add( (return_damper, BRICK['partOf'], fb) )
    g.add( (upstream_temp, BRICK['partOf'], fb) )
    g.add( (downstream_temp, BRICK['partOf'], fb) )
    g.add( (cooled_flow, BRICK['partOf'], fb) )
    g.add( (cooled_valve['fb'], BRICK['partOf'], fb) )
    
    # feeds
    g.add( (ui, BRICK['feeds'], supply_damper) )
    g.add( (supply_damper, BRICK['feeds'], upstream_temp) )
    g.add( (upstream_temp, BRICK['feeds'], hx['si']) )
    g.add( (hx['so'], BRICK['feeds'], downstream_temp) )
    g.add( (downstream_temp, BRICK['feeds'], do) )
    g.add( (di, BRICK['feeds'], return_damper) )
    g.add( (return_damper, BRICK['feeds'], uo) )
    g.add( (cooled_input, BRICK['feeds'], cooled_flow) )
    g.add( (cooled_flow, BRICK['feeds'], hx['pi']) )
    g.add( (hx['po'], BRICK['feeds'], cooled_valve['i'][0]) )
    g.add( (cooled_valve['o'][0], BRICK['feeds'], co) )
    g.add( (cooled_flow, BRICK['feeds'], cooled_valve['i'][1]) )
    
    # controls
    g.add( (upstream_temp, BRICK['controls'], controller) )
    g.add( (controller, BRICK['controls'], supply_damper) )
    g.add( (controller, BRICK['controls'], return_damper) )
    
    ports = {
        'fb': fb,
        'ui': pi, # upstream input
        'uo': po, # upstream output
        'di': si, # downstream input
        'do': so, # downstream output
        'ci': pi, # cooled input
        'co': po, # cooled output
    }
    return ports

# instantiate a differential pressure transmitter
def gen_dpt (prefix):
    fb = GTC[prefix+'/fb']
    u  = GTC[prefix+'/port[u]']
    d  = GTC[prefix+'/port[d]']
    o  = GTC[prefix+'/port[o]']
    t  = GTC[prefix+'/transmitter']
    
    # types
    g.add( (fb, RDF.type, GTC['DPT_Functional_Block']) )
    g.add( (u, RDF.type, GTC['DPT_Upstream_Input']) )
    g.add( (d, RDF.type, GTC['DPT_Downstream_Input']) )
    g.add( (o, RDF.type, GTC['DPT_Output']) )
    g.add( (t, RDF.type, GTC['Differential_Pressure_Transmitter']) )
    
    # partOf
    g.add( (u, BRICK['partOf'], fb) )
    g.add( (d, BRICK['partOf'], fb) )
    g.add( (o, BRICK['partOf'], fb) )
    g.add( (t, BRICK['partOf'], fb) )
    
    # controls
    g.add( (u, BRICK['controls'], t) )
    g.add( (d, BRICK['controls'], t) )
    g.add( (t, BRICK['controls'], o) )
    
    ports = {
        'fb': fb,
        'u': u, # upstream
        'd': d, # downstream
        'o': o, # transmitter
    }
    return ports

# instantiate a filter element (filter wrapped in a differential pressure transmitter setup)
def gen_filter_element (prefix):
    fb                = GTC[prefix+'/fb']
    i                 = GTC[prefix+'/port[i]']
    o                 = GTC[prefix+'/port[o]']
    input_pressure    = GTC[prefix+'/input_pressure']
    filter_nonkeyword = GTC[prefix+'/filter']
    output_pressure   = GTC[prefix+'/output_pressure']
    dpt               = gen_dpt(prefix+'/dpt')
    
    # types
    g.add( (fb, RDF.type, GTC['GTC_Filter_Element_Functional_Block']) )
    g.add( (i, RDF.type, GTC['GTC_Filter_Element_Input']) )
    g.add( (o, RDF.type, GTC['GTC_Filter_Element_Output']) )
    g.add( (input_pressure, RDF.type, GTC['Pressure_Sensor']) )
    g.add( (filter_nonkeyword, RDF.type, GTC['Filter']) )
    g.add( (output_pressure, RDF.type, GTC['Pressure_Sensor']) )
    
    # partOf
    g.add( (i, BRICK['partOf'], fb) )
    g.add( (o, BRICK['partOf'], fb) )
    g.add( (input_pressure, BRICK['partOf'], fb) )
    g.add( (filter_nonkeyword, BRICK['partOf'], fb) )
    g.add( (output_pressure, BRICK['partOf'], fb) )
    g.add( (dpt['fb'], BRICK['partOf'], fb) )
    
    # feeds
    g.add( (i, BRICK['feeds'], input_pressure) )
    g.add( (input_pressure, BRICK['feeds'], filter_nonkeyword) )
    g.add( (filter_nonkeyword, BRICK['feeds'], output_pressure) )
    g.add( (output_pressure, BRICK['feeds'], o) )
    
    
    # controls
    g.add( (input_pressure, BRICK['controls'], dpt['u']) )
    g.add( (output_pressure, BRICK['controls'], dpt['d']) )
    
    ports = {
        'fb': fb,
        'i': i,
        'o': o,
    }
    return ports

def gen_room (prefix, floors, gtc_data, rooms_data, vav_data):
    ports = {
        'fb': fb,
    }
    return ports

def gen_building (prefix):
    # load data
    with open('gtc.json') as fo:
        gtc_data = json.loads(''.join(fo.readlines()))
    with open('rooms.json') as fo:
        rooms_data = json.loads(''.join(fo.readlines()))
    with open('gtc_vavs.json') as fo:
        vav_data = json.loads(''.join(fo.readlines()))
    
    building             = GTC[prefix]
    floors               = map(lambda level: GTC[prefix+'/floors/'+str(level)], range(3))
    rooms                = {}
    for room_name in 
        rooms[room_name] = gen_room(prefix+'/rooms/'+room_name, floors, gtc_data, rooms_data, vav_data)
    district_meter       = gen_heating_power_meter(prefix+'/district_meter')
    radiator_htb         = gen_heat_transfer_box(prefix+'/radiator_htb')
    floor_htb            = gen_heat_transfer_box(prefix+'/radiator_htb')
    outside_temp         = GTC[prefix+'/outside_temp']
    outside_fe           = gen_filter_element(prefix+'outside_fe')
    outside_fe_temp      = GTC[prefix+'/outside_fe_temp']
    hx1                  = gen_hx(prefix+'/district_hx')
    hx_temp              = GTC[prefix+'/hx_temp']
    hx_fan               = GTC[prefix+'/']
    hx2                  = gen_hx(prefix+'/return_hx')
    supply_temp          = GTC[prefix+'/supply_temp']
    supply_n_pres        = GTC[prefix+'/supply_north_pressure']
    supply_s_pres        = GTC[prefix+'/supply_south_pressure']
    return_n_pres        = GTC[prefix+'/return_north_pressure']
    return_s_pres        = GTC[prefix+'/return_south_pressure']
    return_damper        = GTC[prefix+'/damper']
    return_fe            = gen_filter_element(prefix+'return_fe')
    return_fe_temp       = GTC[prefix+'/return_fe_temp']
    exhaust_temp         = GTC[prefix+'/exhaust_temp']
    exhaust_fan          = GTC[prefix+'/exhaust_fan']
    ahu_meter            = gen_heating_power_meter(prefix+'ahu_meter')
    district_supply_temp = GTC[prefix+'/district_supply_temp']
    district_pump        = GTC[prefix+'/district_pump']
    district_return_temp = GTC[prefix+'/district_return_temp']
    district_valve       = GTC[prefix+'/district_valve']
    district_rect        = GTC[prefix+'/district_rectifier']
    
    # labels
    g.add( (building, RDFS.label, Literal("GreenTech Center in Vejle, Denmark")) )
    
    # types
    g.add( (outside_temp        , RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (outside_fe_temp     , RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (hx_temp             , RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (hx_fan              , RDF.type, BRICK['Fan']) )
    g.add( (supply_temp         , RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (supply_n_pres       , RDF.type,   GTC['Pressure_Sensor']) )
    g.add( (supply_s_pres       , RDF.type,   GTC['Pressure_Sensor']) )
    g.add( (return_n_pres       , RDF.type,   GTC['Pressure_Sensor']) )
    g.add( (return_s_pres       , RDF.type,   GTC['Pressure_Sensor']) )
    g.add( (return_damper       , RDF.type, BRICK['Damper']) )
    g.add( (return_fe_temp      , RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (exhaust_temp        , RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (exhaust_fan         , RDF.type, BRICK['Fan']) )
    g.add( (district_supply_temp, RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (district_pump       , RDF.type, BRICK['Pump']) )
    g.add( (district_return_temp, RDF.type,   GTC['Celcius_Temperature_Sensor']) )
    g.add( (district_valve      , RDF.type, BRICK['Valve']) )
    g.add( (district_rect       , RDF.type,   GTC['Rectifier']) )
    
    # feeds
    g.add( (district_meter['metered_supply'], BRICK['feeds'], radiator_htb['pi']) )
    g.add( (district_meter['metered_supply'], BRICK['feeds'],    floor_htb['pi']) )
    g.add( (district_meter['metered_supply'], BRICK['feeds'],    ahu_meter['supply']) )
    g.add( ( radiator_htb['pi'], BRICK['feeds'], ahu_meter['metered_return']) )
    g.add( (    floor_htb['pi'], BRICK['feeds'], ahu_meter['metered_return']) )
    g.add( (ahu_meter['return'], BRICK['feeds'], ahu_meter['metered_return']) )
    g.add( (outside_temp, BRICK['feeds'], outside_fe['i']) )
    g.add( (outside_fe['o'], BRICK['feeds'], outside_fe_temp) )
    g.add( (outside_fe_temp, BRICK['feeds'], hx1['si']) )
    g.add( (hx1['so'], BRICK['feeds'], hx_temp) )
    g.add( (hx_temp, BRICK['feeds'], hx_fan) )
    g.add( (hx_fan, BRICK['feeds'], hx2['si']) )
    g.add( (hx2['so'], BRICK['feeds'], supply_temp) )
    g.add( (supply_temp, BRICK['feeds'], supply_n_pres) )
    g.add( (supply_temp, BRICK['feeds'], supply_n_pres) )
    g.add( (return_n_pres, BRICK['feeds'], return_damper) )
    g.add( (return_s_pres, BRICK['feeds'], return_damper) )
    g.add( (return_damper, BRICK['feeds'], return_fe['i']) )
    g.add( (return_fe['o'], BRICK['feeds'], return_fe_temp) )
    g.add( (return_fe_temp, BRICK['feeds'], hx1['pi']) )
    g.add( (hx1['po'], BRICK['feeds'], exhaust_temp) )
    g.add( (exhaust_temp, BRICK['feeds'], exhaust_fan) )
    g.add( (ahu_meter['metered_supply'], BRICK['feeds'], district_supply_temp) )
    g.add( (district_supply_temp, BRICK['feeds'], district_pump) )
    g.add( (district_pump, BRICK['feeds'], hx2['pi']) )
    g.add( (hx2['po'], BRICK['feeds'], district_return_temp) )
    g.add( (district_return_temp, BRICK['feeds'], district_valve) )
    g.add( (district_valve, BRICK['feeds'], ahu_meter['metered_return']) )
    g.add( (district_return_temp, BRICK['feeds'], district_rect) )
    g.add( (district_rect, BRICK['feeds'], district_supply_temp) )
    
    # partOf
    for floor in floors:
        g.add( (floor           , BRICK['partOf'], building) )
    for room_name in floors:
        g.add( (rooms[room_name]['fb'], BRICK['partOf'], building) )
    g.add( (district_meter      , BRICK['partOf'], building) )
    g.add( (radiator_htb        , BRICK['partOf'], building) )
    g.add( (floor_htb           , BRICK['partOf'], building) )
    g.add( (outside_temp        , BRICK['partOf'], building) )
    g.add( (outside_fe          , BRICK['partOf'], building) )
    g.add( (outside_fe_temp     , BRICK['partOf'], building) )
    g.add( (hx1                 , BRICK['partOf'], building) )
    g.add( (hx_temp             , BRICK['partOf'], building) )
    g.add( (hx_fan              , BRICK['partOf'], building) )
    g.add( (hx2                 , BRICK['partOf'], building) )
    g.add( (supply_temp         , BRICK['partOf'], building) )
    g.add( (supply_n_pres       , BRICK['partOf'], building) )
    g.add( (supply_s_pres       , BRICK['partOf'], building) )
    g.add( (return_n_pres       , BRICK['partOf'], building) )
    g.add( (return_s_pres       , BRICK['partOf'], building) )
    g.add( (return_damper       , BRICK['partOf'], building) )
    g.add( (return_fe           , BRICK['partOf'], building) )
    g.add( (return_fe_temp      , BRICK['partOf'], building) )
    g.add( (exhaust_temp        , BRICK['partOf'], building) )
    g.add( (exhaust_fan         , BRICK['partOf'], building) )
    g.add( (ahu_meter           , BRICK['partOf'], building) )
    g.add( (district_supply_temp, BRICK['partOf'], building) )
    g.add( (district_pump       , BRICK['partOf'], building) )
    g.add( (district_return_temp, BRICK['partOf'], building) )
    g.add( (district_valve      , BRICK['partOf'], building) )
    g.add( (district_rect       , BRICK['partOf'], building) )

################################################################################
###################################################################### main ####
################################################################################


prefix = 'building:gtc'

gen_extensions()

# building
b = gen_building(prefix)

################################################################################
############################################################### back matter ####
################################################################################

g.serialize('sdu_gtc_simple.ttl', 'turtle')

